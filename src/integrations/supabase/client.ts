
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hshfqxjrilqzjpkcotgz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhzaGZxeGpyaWxxempwa2NvdGd6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1MzA4NDcsImV4cCI6MjA1NzEwNjg0N30.8GG-VHaE5AsSioozj1wKH7NI0Az-PqWcOLmH5UMvsJY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Document management API utilities
export const documentManagementApi = {
  // Document Types
  getDocumentTypes: async () => {
    const { data } = await supabase.functions.invoke('document-management', {
      body: { 
        action: 'getDocumentTypes'
      }
    });
    return data?.documentTypes || [];
  },
  
  createDocumentType: async (documentType: { name: string, resource: string, description?: string, required?: boolean }) => {
    const { data } = await supabase.functions.invoke('document-management', {
      method: 'POST',
      body: { 
        action: 'createDocumentType',
        documentType
      }
    });
    return data;
  },
  
  // Documents
  getDocuments: async (filters?: { resourceType?: string, resourceId?: string, status?: string }) => {
    const { data } = await supabase.functions.invoke('document-management', {
      body: { 
        action: 'getDocuments',
        filters
      }
    });
    return data?.documents || [];
  },
  
  submitDocument: async (document: {
    documentTypeId: string,
    resourceType: string,
    resourceId: string,
    filePath: string,
    fileName: string,
    fileSize?: number,
    mimeType?: string
  }) => {
    const { data } = await supabase.functions.invoke('document-management', {
      method: 'POST',
      body: { 
        action: 'submitDocument',
        document
      }
    });
    return data;
  },
  
  updateDocumentStatus: async (update: { id: string, status: string, reviewNotes?: string }) => {
    const { data } = await supabase.functions.invoke('document-management', {
      method: 'PUT',
      body: { 
        action: 'updateDocumentStatus',
        update
      }
    });
    return data;
  }
};

// Project management API utilities
export const projectManagementApi = {
  // Get projects
  getProjects: async (filters?: { name?: string, status?: string }) => {
    const { data } = await supabase.functions.invoke('project-management', {
      body: {
        endpoint: 'projects',
        ...filters
      }
    });
    return data?.projects || [];
  },
  
  // Create project
  createProject: async (project: {
    name: string,
    cnpj: string,
    company_id: string,
    initial_date: string,
    end_date?: string | null
  }) => {
    const { data } = await supabase.functions.invoke('project-management', {
      method: 'POST',
      body: {
        endpoint: 'projects',
        ...project
      }
    });
    return data?.project;
  },
  
  // Get single project
  getProject: async (id: string) => {
    const { data } = await supabase.functions.invoke('project-management', {
      body: {
        endpoint: `projects/${id}`
      }
    });
    return data?.project;
  },
  
  // Update project
  updateProject: async (id: string, updates: {
    name?: string,
    status?: 'active' | 'inactive',
    end_date?: string | null
  }) => {
    const { data } = await supabase.functions.invoke('project-management', {
      method: 'PUT',
      body: {
        endpoint: id,
        ...updates
      }
    });
    return data?.project;
  }
};
